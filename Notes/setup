npm init //to install the node server

--save = -S 
//--save will write this dependency to package.json

install = i

//Project dependencies
    express.js - use to create a node web server
    npm install --save express
    npm i -s express

    //MongoDB installed for DB
    npm i -S mongodb

    //React and React-DOM
    npm i -S react react-dom


//DEV Dependencies
    --save-dev = saves the piece for developement

    //Webpack - used to translate modular code 
    npm install --save-dev webpack

    //babel to translate JSX
    npm i -D babel-cli babel-loader babel-preset-es2015 babel-preset-stage-2 babel-preset-react
    //might consider using
    npm i -D babel-cli babel-loader babel-preset-env babel-preset-stage-2 babel-preset-react

    //use nodemon to monitor for changes to node setup and restart automagically
    npm i -D nodemon

    //eslint to monitor js qual
    npm i -D eslint eslint-plugin-react babel-eslint


//Project Structure
    //src folder - holds all of our frontend js modular code
        mkdir src
        touch src/index.js

    //public - holds static assets like html, js, and css files
        mkdir public
        touch public/index.html

    //api - a dir for our backend api server
        mkdir api
        touch api/index.js

    //webpack.config.js -tells webpack how to run
        -entry, tells it where to start looking
        -output - tells it where to output the fle and its name
        -module - the files to run this on and what to run on them

    //.babelrc - tells babel what presets to use

    //.eslintrc.js - tells what eslint rules to follow

//Node.js scripts in package.json
    "start": "nodemon --exec babel-node server.js --ignore public/"
    //uses nodemon execution wrapper and use babel-node to support babel, and we ignore the public directory in nodemon, as changes there are driven by source directory

    "dev": "webpack -wd" 
    //transformns src files into bundled file for the browser
    //-wd - watch and developement mode

//json-loader
npm i -S json-loader
//add this to loaders in webpack.config
    {
        test: /\.json$/,
        loader: "json-loader"
    }